diff --git a/js/extensionPrefs/main.js b/js/extensionPrefs/main.js
index 43efa95e92976e0f2741450e3376ff4c7cb7077b..83ab3e05a737bcbbca9ed9da1c8cf0a1b924a437 100644
--- a/js/extensionPrefs/main.js
+++ b/js/extensionPrefs/main.js
@@ -264,13 +264,11 @@ var Application = class {
     }
 
     _scanExtensions() {
-        let finder = new ExtensionUtils.ExtensionFinder();
-        finder.connect('extension-found', this._extensionFound.bind(this));
-        finder.scanExtensions();
+        ExtensionUtils.scanExtensions((extension) => this._extensionFound(extension));
         this._extensionsLoaded();
     }
 
-    _extensionFound(finder, extension) {
+    _extensionFound(extension) {
         let row = new ExtensionRow(extension.uuid);
 
         row.prefsButton.visible = this._extensionAvailable(row.uuid);
diff --git a/js/misc/extensionUtils.js b/js/misc/extensionUtils.js
index cf308b31f141f0f339b0c3a7c489313e0f714219..9e47c6808d3e3ee50db9f729cfe0bebaf06be732 100644
--- a/js/misc/extensionUtils.js
+++ b/js/misc/extensionUtils.js
@@ -4,7 +4,6 @@
 // preferences tool
 
 const Gettext = imports.gettext;
-const Signals = imports.signals;
 
 const Gio = imports.gi.Gio;
 
@@ -147,8 +146,8 @@ function versionCheck(required, current) {
         let requiredArray = required[i].split('.');
         if (requiredArray[0] == major &&
             requiredArray[1] == minor &&
-            (requiredArray[2] == point ||
-             (requiredArray[2] == undefined && parseInt(minor) % 2 == 0)))
+            ((requiredArray[2] === undefined && parseInt(minor) % 2 == 0) ||
+             requiredArray[2] == point))
             return true;
     }
     return false;
@@ -177,6 +176,7 @@ function createExtensionObject(uuid, dir, type) {
     } catch (e) {
         throw new Error('Failed to load metadata.json: ' + e);
     }
+
     let meta;
     try {
         meta = JSON.parse(metadataContents);
@@ -220,35 +220,33 @@ function installImporter(extension) {
     imports.searchPath = oldSearchPath;
 }
 
-var ExtensionFinder = class {
-    _loadExtension(extensionDir, info, perUserDir) {
-        let fileType = info.get_file_type();
-        if (fileType != Gio.FileType.DIRECTORY)
-            return;
-        let uuid = info.get_name();
-        let existing = extensions[uuid];
-        if (existing) {
-            log('Extension %s already installed in %s. %s will not be loaded'.format(uuid, existing.path, extensionDir.get_path()));
-            return;
-        }
+function _loadExtension(extensionDir, info, perUserDir, callback) {
+    let fileType = info.get_file_type();
+    if (fileType != Gio.FileType.DIRECTORY)
+        return;
 
-        let extension;
-        let type = extensionDir.has_prefix(perUserDir) ? ExtensionType.PER_USER
-                                                       : ExtensionType.SYSTEM;
-        try {
-            extension = createExtensionObject(uuid, extensionDir, type);
-        } catch(e) {
-            logError(e, 'Could not load extension %s'.format(uuid));
-            return;
-        }
-        this.emit('extension-found', extension);
+    let uuid = info.get_name();
+    let existing = extensions[uuid];
+    if (existing) {
+        log('Extension %s already installed in %s. %s will not be loaded'.format(uuid, existing.path, extensionDir.get_path()));
+        return;
     }
 
-    scanExtensions() {
-        let perUserDir = Gio.File.new_for_path(global.userdatadir);
-        FileUtils.collectFromDatadirs('extensions', true, (dir, info) => {
-            this._loadExtension(dir, info, perUserDir);
-        });
+    let extension;
+    let type = extensionDir.has_prefix(perUserDir) ? ExtensionType.PER_USER : ExtensionType.SYSTEM;
+    try {
+        extension = createExtensionObject(uuid, extensionDir, type);
+    } catch(e) {
+        logError(e, 'Could not load extension %s'.format(uuid));
+        return;
     }
-};
-Signals.addSignalMethods(ExtensionFinder.prototype);
+
+    callback(extension);
+}
+
+function scanExtensions(callback) {
+    let perUserDir = Gio.File.new_for_path(global.userdatadir);
+    FileUtils.collectFromDatadirs('extensions', true, (dir, info) => {
+        _loadExtension(dir, info, perUserDir, callback);
+    });
+}
diff --git a/js/ui/extensionSystem.js b/js/ui/extensionSystem.js
index 6244c39b44fe50d43c3ea9cbd77476182801c5fd..d660b9077a5f3625cd6be8796cd32bbe804f8d75 100644
--- a/js/ui/extensionSystem.js
+++ b/js/ui/extensionSystem.js
@@ -19,10 +19,14 @@ var ExtensionState = {
     UNINSTALLED: 99
 };
 
-// Arrays of uuids
-var enabledExtensions;
-// Contains the order that extensions were enabled in.
-var extensionOrder = [];
+// Array of UUIDs
+var _enabledExtensions = [];
+// Array of UUIDs in order that extensions were enabled in
+var _extensionOrder = [];
+// Array with IDs of signals connected to
+var _settingsConnections = [];
+
+var _initialized = false;
 
 // We don't really have a class to add signals on. So, create
 // a simple dummy object, add the signal methods, and export those
@@ -37,10 +41,7 @@ const ENABLED_EXTENSIONS_KEY = 'enabled-extensions';
 const DISABLE_USER_EXTENSIONS_KEY = 'disable-user-extensions';
 const EXTENSION_DISABLE_VERSION_CHECK_KEY = 'disable-extension-version-validation';
 
-var initted = false;
-var enabled;
-
-function disableExtension(uuid) {
+function _disableExtension(uuid) {
     let extension = ExtensionUtils.extensions[uuid];
     if (!extension)
         return;
@@ -56,8 +57,8 @@ function disableExtension(uuid) {
     //   user disables C
     //   this should: disable E, disable D, disable C, enable D, enable E
 
-    let orderIdx = extensionOrder.indexOf(uuid);
-    let order = extensionOrder.slice(orderIdx + 1);
+    let orderIdx = _extensionOrder.indexOf(uuid);
+    let order = _extensionOrder.slice(orderIdx + 1);
     let orderReversed = order.slice().reverse();
 
     for (let i = 0; i < orderReversed.length; i++) {
@@ -90,26 +91,26 @@ function disableExtension(uuid) {
         }
     }
 
-    extensionOrder.splice(orderIdx, 1);
+    _extensionOrder.splice(orderIdx, 1);
 
-    if ( extension.state != ExtensionState.ERROR ) {
+    if (extension.state != ExtensionState.ERROR) {
         extension.state = ExtensionState.DISABLED;
         _signals.emit('extension-state-changed', extension);
     }
 }
 
-function enableExtension(uuid) {
+function _enableExtension(uuid) {
     let extension = ExtensionUtils.extensions[uuid];
     if (!extension)
         return;
 
     if (extension.state == ExtensionState.INITIALIZED)
-        initExtension(uuid);
+        _initExtension(uuid);
 
     if (extension.state != ExtensionState.DISABLED)
         return;
 
-    extensionOrder.push(uuid);
+    _extensionOrder.push(uuid);
 
     let stylesheetNames = [global.session_mode + '.css', 'stylesheet.css'];
     let theme = St.ThemeContext.get_for_stage(global.stage).get_theme();
@@ -169,12 +170,12 @@ function loadExtension(extension) {
     if (checkVersion && ExtensionUtils.isOutOfDate(extension)) {
         extension.state = ExtensionState.OUT_OF_DATE;
     } else {
-        let enabled = enabledExtensions.indexOf(extension.uuid) != -1;
+        let enabled = _enabledExtensions.indexOf(extension.uuid) != -1;
         if (enabled) {
-            if (!initExtension(extension.uuid))
+            if (!_initExtension(extension.uuid))
                 return;
             if (extension.state == ExtensionState.DISABLED)
-                enableExtension(extension.uuid);
+                _enableExtension(extension.uuid);
         } else {
             extension.state = ExtensionState.INITIALIZED;
         }
@@ -187,7 +188,7 @@ function unloadExtension(extension) {
     // Try to disable it -- if it's ERROR'd, we can't guarantee that,
     // but it will be removed on next reboot, and hopefully nothing
     // broke too much.
-    disableExtension(extension.uuid);
+    _disableExtension(extension.uuid);
 
     extension.state = ExtensionState.UNINSTALLED;
     _signals.emit('extension-state-changed', extension);
@@ -216,12 +217,12 @@ function reloadExtension(oldExtension) {
     loadExtension(newExtension);
 }
 
-function initExtension(uuid) {
+function _initExtension(uuid) {
     let extension = ExtensionUtils.extensions[uuid];
     let dir = extension.dir;
 
     if (!extension)
-        throw new Error("Extension was not properly created. Call loadExtension first");
+        throw new Error("Extension was not properly created. Call ExtensionUtils.createExtensionObject first");
 
     let extensionJs = dir.get_child('extension.js');
     if (!extensionJs.query_exists(null)) {
@@ -271,100 +272,81 @@ function getEnabledExtensions() {
     return extensions.concat(global.settings.get_strv(ENABLED_EXTENSIONS_KEY));
 }
 
-function onEnabledExtensionsChanged() {
+function _onEnabledExtensionsChanged() {
     let newEnabledExtensions = getEnabledExtensions();
 
-    if (!enabled)
-        return;
-
     // Find and enable all the newly enabled extensions: UUIDs found in the
     // new setting, but not in the old one.
     newEnabledExtensions.filter(
-        uuid => !enabledExtensions.includes(uuid)
+        uuid => !_enabledExtensions.includes(uuid)
     ).forEach(uuid => {
-        enableExtension(uuid);
+        _enableExtension(uuid);
     });
 
     // Find and disable all the newly disabled extensions: UUIDs found in the
     // old setting, but not in the new one.
-    enabledExtensions.filter(
-        item => !newEnabledExtensions.includes(item)
-    ).forEach(uuid => {
-        disableExtension(uuid);
+    _extensionOrder.filter(
+        uuid => !newEnabledExtensions.includes(uuid)
+    ).slice().reverse().forEach(uuid => {
+        _disableExtension(uuid);
     });
 
-    enabledExtensions = newEnabledExtensions;
+    _enabledExtensions = newEnabledExtensions;
 }
 
 function _onVersionValidationChanged() {
-    // we want to reload all extensions, but only enable
-    // extensions when allowed by the sessionMode, so
-    // temporarily disable them all
-    enabledExtensions = [];
+    // Disable the extensions in a fast way before reloading
+    // them. While reloadExtension would also disable them,
+    // it can't be called using the reversed _extensionOrder
+    // array, which avoids disabling and re-enabling a lot
+    // extensions during the process.
+    _extensionOrder.slice().reverse().forEach(uuid => _disableExtension(uuid));
+
     for (let uuid in ExtensionUtils.extensions)
         reloadExtension(ExtensionUtils.extensions[uuid]);
-    enabledExtensions = getEnabledExtensions();
-
-    if (Main.sessionMode.allowExtensions) {
-        enabledExtensions.forEach(uuid => {
-            enableExtension(uuid);
-        });
-    }
 }
 
 function _loadExtensions() {
-    global.settings.connect('changed::' + ENABLED_EXTENSIONS_KEY, onEnabledExtensionsChanged);
-    global.settings.connect('changed::' + DISABLE_USER_EXTENSIONS_KEY, onEnabledExtensionsChanged);
-    global.settings.connect('changed::' + EXTENSION_DISABLE_VERSION_CHECK_KEY, _onVersionValidationChanged);
-
-    enabledExtensions = getEnabledExtensions();
+    _enabledExtensions = getEnabledExtensions();
 
-    let finder = new ExtensionUtils.ExtensionFinder();
-    finder.connect('extension-found', (finder, extension) => {
-        loadExtension(extension);
-    });
-    finder.scanExtensions();
+    ExtensionUtils.scanExtensions((extension) => loadExtension(extension));
+    _initialized = true;
 }
 
-function enableAllExtensions() {
-    if (enabled)
+function _connectSettingsChanged() {
+    if (_settingsConnections.length > 0)
         return;
 
-    if (!initted) {
-        _loadExtensions();
-        initted = true;
-    } else {
-        enabledExtensions.forEach(uuid => {
-            enableExtension(uuid);
-        });
-    }
-    enabled = true;
+    _settingsConnections.push(global.settings.connect('changed::' + ENABLED_EXTENSIONS_KEY, _onEnabledExtensionsChanged));
+    _settingsConnections.push(global.settings.connect('changed::' + DISABLE_USER_EXTENSIONS_KEY, _onEnabledExtensionsChanged));
+    _settingsConnections.push(global.settings.connect('changed::' + EXTENSION_DISABLE_VERSION_CHECK_KEY, _onVersionValidationChanged));
 }
 
-function disableAllExtensions() {
-    if (!enabled)
-        return;
-
-    if (initted) {
-        extensionOrder.slice().reverse().forEach(uuid => {
-            disableExtension(uuid);
-        });
-    }
+function _disconnectSettingsChanged() {
+    _settingsConnections.forEach(id => {
+        global.settings.disconnect(id);
+    });
 
-    enabled = false;
+    _settingsConnections = [];
 }
 
 function _sessionUpdated() {
     // For now sessionMode.allowExtensions controls extensions from both the
     // 'enabled-extensions' preference and the sessionMode.enabledExtensions
-    // property; it might make sense to make enabledExtensions independent
+    // property; it might make sense to make _enabledExtensions independent
     // from allowExtensions in the future
     if (Main.sessionMode.allowExtensions) {
-        if (initted)
-            enabledExtensions = getEnabledExtensions();
-        enableAllExtensions();
+        if (!_initialized)
+            _loadExtensions();
+        else
+            _onEnabledExtensionsChanged();
+
+        _connectSettingsChanged();
     } else {
-        disableAllExtensions();
+        _disconnectSettingsChanged();
+
+        _extensionOrder.slice().reverse().forEach(uuid => _disableExtension(uuid));
+        _enabledExtensions = [];
     }
 }
 
