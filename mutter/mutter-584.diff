diff --git a/src/backends/native/meta-drm-buffer-dumb.c b/src/backends/native/meta-drm-buffer-dumb.c
new file mode 100644
index 0000000000000000000000000000000000000000..ccf5747f5d1789b2a128e33f7e0fcd920872cc5d
--- /dev/null
+++ b/src/backends/native/meta-drm-buffer-dumb.c
@@ -0,0 +1,65 @@
+/*
+ * Copyright (C) 2011 Intel Corporation.
+ * Copyright (C) 2016 Red Hat
+ * Copyright (C) 2018 DisplayLink (UK) Ltd.
+ * Copyright (C) 2018 Canonical Ltd.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+ * 02111-1307, USA.
+ *
+ */
+
+#include "config.h"
+
+#include "backends/native/meta-drm-buffer-dumb.h"
+
+struct _MetaDrmBufferDumb
+{
+  MetaDrmBuffer parent;
+
+  uint32_t fb_id;
+};
+
+G_DEFINE_TYPE (MetaDrmBufferDumb, meta_drm_buffer_dumb, META_TYPE_DRM_BUFFER)
+
+MetaDrmBufferDumb *
+meta_drm_buffer_dumb_new (uint32_t dumb_fb_id)
+{
+  MetaDrmBufferDumb *buffer_dumb;
+
+  buffer_dumb = g_object_new (META_TYPE_DRM_BUFFER_DUMB, NULL);
+  buffer_dumb->fb_id = dumb_fb_id;
+
+  return buffer_dumb;
+}
+
+static uint32_t
+meta_drm_buffer_dumb_get_fb_id (MetaDrmBuffer *buffer)
+{
+  return META_DRM_BUFFER_DUMB (buffer)->fb_id;
+}
+
+static void
+meta_drm_buffer_dumb_init (MetaDrmBufferDumb *buffer_dumb)
+{
+}
+
+static void
+meta_drm_buffer_dumb_class_init (MetaDrmBufferDumbClass *klass)
+{
+  MetaDrmBufferClass *buffer_class = META_DRM_BUFFER_CLASS (klass);
+
+  buffer_class->get_fb_id = meta_drm_buffer_dumb_get_fb_id;
+}
diff --git a/src/backends/native/meta-drm-buffer-dumb.h b/src/backends/native/meta-drm-buffer-dumb.h
new file mode 100644
index 0000000000000000000000000000000000000000..f8b733f8892933e0648d0c0bbfb99365779d9261
--- /dev/null
+++ b/src/backends/native/meta-drm-buffer-dumb.h
@@ -0,0 +1,35 @@
+/*
+ * Copyright (C) 2018 Canonical Ltd.
+ * Copyright (C) 2019 Red Hat Inc.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+ * 02111-1307, USA.
+ *
+ */
+
+#ifndef META_DRM_BUFFER_DUMB_H
+#define META_DRM_BUFFER_DUMB_H
+
+#include "backends/native/meta-drm-buffer.h"
+
+#define META_TYPE_DRM_BUFFER_DUMB (meta_drm_buffer_dumb_get_type ())
+G_DECLARE_FINAL_TYPE (MetaDrmBufferDumb,
+                      meta_drm_buffer_dumb,
+                      META, DRM_BUFFER_DUMB,
+                      MetaDrmBuffer)
+
+MetaDrmBufferDumb * meta_drm_buffer_dumb_new (uint32_t dumb_fb_id);
+
+#endif /* META_DRM_BUFFER_DUMB_H */
diff --git a/src/backends/native/meta-drm-buffer-gbm.c b/src/backends/native/meta-drm-buffer-gbm.c
new file mode 100644
index 0000000000000000000000000000000000000000..d427efdf53d86a350b848ef2b7eee15004290231
--- /dev/null
+++ b/src/backends/native/meta-drm-buffer-gbm.c
@@ -0,0 +1,232 @@
+/*
+ * Copyright (C) 2011 Intel Corporation.
+ * Copyright (C) 2016 Red Hat
+ * Copyright (C) 2018 DisplayLink (UK) Ltd.
+ * Copyright (C) 2018 Canonical Ltd.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+ * 02111-1307, USA.
+ *
+ */
+
+#include "config.h"
+
+#include "backends/native/meta-drm-buffer-gbm.h"
+
+#include <drm_fourcc.h>
+#include <errno.h>
+#include <xf86drm.h>
+#include <xf86drmMode.h>
+
+#define INVALID_FB_ID 0U
+
+struct _MetaDrmBufferGbm
+{
+  MetaDrmBuffer parent;
+
+  MetaGpuKms *gpu_kms;
+
+  struct gbm_surface *surface;
+
+  struct gbm_bo *bo;
+  uint32_t fb_id;
+};
+
+G_DEFINE_TYPE (MetaDrmBufferGbm, meta_drm_buffer_gbm, META_TYPE_DRM_BUFFER)
+
+struct gbm_bo *
+meta_drm_buffer_gbm_get_bo (MetaDrmBufferGbm *buffer_gbm)
+{
+  return buffer_gbm->bo;
+}
+
+static gboolean
+acquire_swapped_buffer (MetaDrmBufferGbm  *buffer_gbm,
+                        gboolean           use_modifiers,
+                        GError           **error)
+{
+  uint32_t handles[4] = {0, 0, 0, 0};
+  uint32_t strides[4] = {0, 0, 0, 0};
+  uint32_t offsets[4] = {0, 0, 0, 0};
+  uint64_t modifiers[4] = {0, 0, 0, 0};
+  uint32_t width, height;
+  uint32_t format;
+  struct gbm_bo *bo;
+  int kms_fd;
+
+  kms_fd = meta_gpu_kms_get_fd (buffer_gbm->gpu_kms);
+
+  bo = gbm_surface_lock_front_buffer (buffer_gbm->surface);
+  if (!bo)
+    {
+      g_set_error (error,
+                   G_IO_ERROR,
+                   G_IO_ERROR_FAILED,
+                   "gbm_surface_lock_front_buffer failed");
+      return FALSE;
+    }
+
+  if (gbm_bo_get_handle_for_plane (bo, 0).s32 == -1)
+    {
+      /* Failed to fetch handle to plane, falling back to old method */
+      strides[0] = gbm_bo_get_stride (bo);
+      handles[0] = gbm_bo_get_handle (bo).u32;
+      offsets[0] = 0;
+      modifiers[0] = DRM_FORMAT_MOD_INVALID;
+    }
+  else
+    {
+      int i;
+
+      for (i = 0; i < gbm_bo_get_plane_count (bo); i++)
+        {
+          strides[i] = gbm_bo_get_stride_for_plane (bo, i);
+          handles[i] = gbm_bo_get_handle_for_plane (bo, i).u32;
+          offsets[i] = gbm_bo_get_offset (bo, i);
+          modifiers[i] = gbm_bo_get_modifier (bo);
+        }
+     }
+
+  width = gbm_bo_get_width (bo);
+  height = gbm_bo_get_height (bo);
+  format = gbm_bo_get_format (bo);
+
+  if (use_modifiers && modifiers[0] != DRM_FORMAT_MOD_INVALID)
+    {
+      if (drmModeAddFB2WithModifiers (kms_fd,
+                                      width, height,
+                                      format,
+                                      handles,
+                                      strides,
+                                      offsets,
+                                      modifiers,
+                                      &buffer_gbm->fb_id,
+                                      DRM_MODE_FB_MODIFIERS))
+        {
+          g_set_error (error,
+                       G_IO_ERROR,
+                       g_io_error_from_errno (errno),
+                       "drmModeAddFB2WithModifiers failed: %s",
+                       g_strerror (errno));
+          gbm_surface_release_buffer (buffer_gbm->surface, bo);
+          return FALSE;
+        }
+    }
+  else if (drmModeAddFB2 (kms_fd,
+                          width,
+                          height,
+                          format,
+                          handles,
+                          strides,
+                          offsets,
+                          &buffer_gbm->fb_id,
+                          0))
+    {
+      if (format != DRM_FORMAT_XRGB8888)
+        {
+          g_set_error (error,
+                       G_IO_ERROR,
+                       G_IO_ERROR_FAILED,
+                       "drmModeAddFB does not support format 0x%x",
+                       format);
+          gbm_surface_release_buffer (buffer_gbm->surface, bo);
+          return FALSE;
+        }
+
+      if (drmModeAddFB (kms_fd,
+                        width,
+                        height,
+                        24,
+                        32,
+                        strides[0],
+                        handles[0],
+                        &buffer_gbm->fb_id))
+        {
+          g_set_error (error,
+                       G_IO_ERROR,
+                       g_io_error_from_errno (errno),
+                       "drmModeAddFB failed: %s",
+                       g_strerror (errno));
+          gbm_surface_release_buffer (buffer_gbm->surface, bo);
+          return FALSE;
+        }
+    }
+
+  buffer_gbm->bo = bo;
+
+  return TRUE;
+}
+
+MetaDrmBufferGbm *
+meta_drm_buffer_gbm_new (MetaGpuKms          *gpu_kms,
+                         struct gbm_surface  *gbm_surface,
+                         gboolean             use_modifiers,
+                         GError             **error)
+{
+  MetaDrmBufferGbm *buffer_gbm;
+
+  buffer_gbm = g_object_new (META_TYPE_DRM_BUFFER_GBM, NULL);
+  buffer_gbm->gpu_kms = gpu_kms;
+  buffer_gbm->surface = gbm_surface;
+
+  if (!acquire_swapped_buffer (buffer_gbm, use_modifiers, error))
+    {
+      g_object_unref (buffer_gbm);
+      return NULL;
+    }
+
+  return buffer_gbm;
+}
+
+static uint32_t
+meta_drm_buffer_gbm_get_fb_id (MetaDrmBuffer *buffer)
+{
+  return META_DRM_BUFFER_GBM (buffer)->fb_id;
+}
+
+static void
+meta_drm_buffer_gbm_finalize (GObject *object)
+{
+  MetaDrmBufferGbm *buffer_gbm = META_DRM_BUFFER_GBM (object);
+
+  if (buffer_gbm->fb_id != INVALID_FB_ID)
+    {
+      int kms_fd;
+
+      kms_fd = meta_gpu_kms_get_fd (buffer_gbm->gpu_kms);
+      drmModeRmFB (kms_fd, buffer_gbm->fb_id);
+    }
+
+  if (buffer_gbm->bo)
+    gbm_surface_release_buffer (buffer_gbm->surface, buffer_gbm->bo);
+
+  G_OBJECT_CLASS (meta_drm_buffer_gbm_parent_class)->finalize (object);
+}
+
+static void
+meta_drm_buffer_gbm_init (MetaDrmBufferGbm *buffer_gbm)
+{
+}
+
+static void
+meta_drm_buffer_gbm_class_init (MetaDrmBufferGbmClass *klass)
+{
+  GObjectClass *object_class = G_OBJECT_CLASS (klass);
+  MetaDrmBufferClass *buffer_class = META_DRM_BUFFER_CLASS (klass);
+
+  object_class->finalize = meta_drm_buffer_gbm_finalize;
+
+  buffer_class->get_fb_id = meta_drm_buffer_gbm_get_fb_id;
+}
diff --git a/src/backends/native/meta-drm-buffer-gbm.h b/src/backends/native/meta-drm-buffer-gbm.h
new file mode 100644
index 0000000000000000000000000000000000000000..b48cef06a12b4767cbe8e77ea0fb0205737906ad
--- /dev/null
+++ b/src/backends/native/meta-drm-buffer-gbm.h
@@ -0,0 +1,43 @@
+/*
+ * Copyright (C) 2018 Canonical Ltd.
+ * Copyright (C) 2019 Red Hat Inc.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+ * 02111-1307, USA.
+ *
+ */
+
+#ifndef META_DRM_BUFFER_GBM_H
+#define META_DRM_BUFFER_GBM_H
+
+#include <gbm.h>
+
+#include "backends/native/meta-drm-buffer.h"
+#include "backends/native/meta-gpu-kms.h"
+
+#define META_TYPE_DRM_BUFFER_GBM (meta_drm_buffer_gbm_get_type ())
+G_DECLARE_FINAL_TYPE (MetaDrmBufferGbm,
+                      meta_drm_buffer_gbm,
+                      META, DRM_BUFFER_GBM,
+                      MetaDrmBuffer)
+
+MetaDrmBufferGbm * meta_drm_buffer_gbm_new (MetaGpuKms          *gpu_kms,
+                                            struct gbm_surface  *gbm_surface,
+                                            gboolean             use_modifiers,
+                                            GError             **error);
+
+struct gbm_bo * meta_drm_buffer_gbm_get_bo (MetaDrmBufferGbm *buffer_gbm);
+
+#endif /* META_DRM_BUFFER_GBM_H */
diff --git a/src/backends/native/meta-drm-buffer.c b/src/backends/native/meta-drm-buffer.c
new file mode 100644
index 0000000000000000000000000000000000000000..85b520825d734f7d4c77e1ba1d99c88bcb8f49d3
--- /dev/null
+++ b/src/backends/native/meta-drm-buffer.c
@@ -0,0 +1,45 @@
+/*
+ * Copyright (C) 2011 Intel Corporation.
+ * Copyright (C) 2016 Red Hat
+ * Copyright (C) 2018 DisplayLink (UK) Ltd.
+ * Copyright (C) 2018 Canonical Ltd.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+ * 02111-1307, USA.
+ *
+ * Author: Daniel van Vugt <daniel.van.vugt@canonical.com>
+ */
+
+#include "config.h"
+
+#include "backends/native/meta-drm-buffer.h"
+
+G_DEFINE_ABSTRACT_TYPE (MetaDrmBuffer, meta_drm_buffer, G_TYPE_OBJECT)
+
+uint32_t
+meta_drm_buffer_get_fb_id (MetaDrmBuffer *buffer)
+{
+  return META_DRM_BUFFER_GET_CLASS (buffer)->get_fb_id (buffer);
+}
+
+static void
+meta_drm_buffer_init (MetaDrmBuffer *buffer)
+{
+}
+
+static void
+meta_drm_buffer_class_init (MetaDrmBufferClass *klass)
+{
+}
diff --git a/src/backends/native/meta-kms-buffer.h b/src/backends/native/meta-drm-buffer.h
similarity index 50%
rename from src/backends/native/meta-kms-buffer.h
rename to src/backends/native/meta-drm-buffer.h
index 74d02d543235fbc99030576b304f1b9c8a2adae5..94873ed40a05bd3a9c4634212aaddadff3bc611d 100644
--- a/src/backends/native/meta-kms-buffer.h
+++ b/src/backends/native/meta-drm-buffer.h
@@ -19,32 +19,28 @@
  * Author: Daniel van Vugt <daniel.van.vugt@canonical.com>
  */
 
-#ifndef META_KMS_BUFFER_H
-#define META_KMS_BUFFER_H
+#ifndef META_DRM_BUFFER_H
+#define META_DRM_BUFFER_H
 
-#include <gbm.h>
 #include <glib-object.h>
+#include <stdint.h>
 
-#include "backends/native/meta-gpu-kms.h"
+#define META_TYPE_DRM_BUFFER (meta_drm_buffer_get_type ())
+G_DECLARE_DERIVABLE_TYPE (MetaDrmBuffer,
+                          meta_drm_buffer,
+                          META, DRM_BUFFER,
+                          GObject)
 
-#define META_TYPE_KMS_BUFFER (meta_kms_buffer_get_type ())
-G_DECLARE_FINAL_TYPE (MetaKmsBuffer,
-                      meta_kms_buffer,
-                      META,
-                      KMS_BUFFER,
-                      GObject)
+struct _MetaDrmBufferClass
+{
+  GObjectClass parent_class;
 
-MetaKmsBuffer *
-meta_kms_buffer_new_from_gbm (MetaGpuKms          *gpu_kms,
-                              struct gbm_surface  *gbm_surface,
-                              gboolean             use_modifiers,
-                              GError             **error);
+  uint32_t (* get_fb_id) (MetaDrmBuffer *buffer);
+};
 
-MetaKmsBuffer *
-meta_kms_buffer_new_from_dumb (uint32_t dumb_fb_id);
+MetaDrmBuffer *
+meta_drm_buffer_new_from_dumb (uint32_t dumb_fb_id);
 
-uint32_t meta_kms_buffer_get_fb_id (const MetaKmsBuffer *kms_buffer);
+uint32_t meta_drm_buffer_get_fb_id (MetaDrmBuffer *buffer);
 
-struct gbm_bo *meta_kms_buffer_get_bo (const MetaKmsBuffer *kms_buffer);
-
-#endif /* META_KMS_BUFFER_H */
+#endif /* META_DRM_BUFFER_H */
diff --git a/src/backends/native/meta-kms-buffer.c b/src/backends/native/meta-kms-buffer.c
deleted file mode 100644
index 3527735f684094de1106734cfebf5e5ade556c61..0000000000000000000000000000000000000000
--- a/src/backends/native/meta-kms-buffer.c
+++ /dev/null
@@ -1,287 +0,0 @@
-/*
- * Copyright (C) 2011 Intel Corporation.
- * Copyright (C) 2016 Red Hat
- * Copyright (C) 2018 DisplayLink (UK) Ltd.
- * Copyright (C) 2018 Canonical Ltd.
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License as
- * published by the Free Software Foundation; either version 2 of the
- * License, or (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful, but
- * WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
- * 02111-1307, USA.
- *
- * Author: Daniel van Vugt <daniel.van.vugt@canonical.com>
- */
-
-#include "backends/native/meta-kms-buffer.h"
-
-#include "config.h"
-
-#include <xf86drm.h>
-#include <xf86drmMode.h>
-#include <drm_fourcc.h>
-#include <errno.h>
-
-#define INVALID_FB_ID 0U
-
-typedef enum _MetaKmsBufferType
-{
-  META_KMS_BUFFER_TYPE_GBM,
-  META_KMS_BUFFER_TYPE_WRAPPED_DUMB
-} MetaKmsBufferType;
-
-struct _MetaKmsBuffer
-{
-  GObject parent;
-
-  MetaKmsBufferType type;
-
-  union
-  {
-    uint32_t fb_id;
-
-    struct
-    {
-      uint32_t fb_id;
-      struct gbm_surface *surface;
-      struct gbm_bo *bo;
-      MetaGpuKms *gpu_kms;
-    } gbm;
-
-    struct
-    {
-      uint32_t fb_id;
-    } wrapped_dumb;
-  };
-};
-
-G_DEFINE_TYPE (MetaKmsBuffer, meta_kms_buffer, G_TYPE_OBJECT)
-
-static gboolean
-meta_kms_buffer_acquire_swapped_buffer (MetaKmsBuffer  *kms_buffer,
-                                        gboolean        use_modifiers,
-                                        GError        **error)
-{
-  uint32_t handles[4] = {0, 0, 0, 0};
-  uint32_t strides[4] = {0, 0, 0, 0};
-  uint32_t offsets[4] = {0, 0, 0, 0};
-  uint64_t modifiers[4] = {0, 0, 0, 0};
-  uint32_t width, height, format;
-  struct gbm_bo *bo;
-  int i;
-  int drm_fd;
-
-  g_return_val_if_fail (META_IS_KMS_BUFFER (kms_buffer), FALSE);
-  g_return_val_if_fail (kms_buffer->type == META_KMS_BUFFER_TYPE_GBM, FALSE);
-  g_return_val_if_fail (kms_buffer->gbm.bo == NULL, FALSE);
-  g_return_val_if_fail (kms_buffer->gbm.surface != NULL, FALSE);
-  g_return_val_if_fail (kms_buffer->gbm.gpu_kms != NULL, FALSE);
-  g_return_val_if_fail (error == NULL || *error == NULL, FALSE);
-
-  drm_fd = meta_gpu_kms_get_fd (kms_buffer->gbm.gpu_kms);
-  g_return_val_if_fail (drm_fd >= 0, FALSE);
-
-  bo = gbm_surface_lock_front_buffer (kms_buffer->gbm.surface);
-  if (!bo)
-    {
-      g_set_error (error,
-                   G_IO_ERROR,
-                   G_IO_ERROR_FAILED,
-                   "gbm_surface_lock_front_buffer failed");
-      return FALSE;
-    }
-
-  if (gbm_bo_get_handle_for_plane (bo, 0).s32 == -1)
-    {
-      /* Failed to fetch handle to plane, falling back to old method */
-      strides[0] = gbm_bo_get_stride (bo);
-      handles[0] = gbm_bo_get_handle (bo).u32;
-      offsets[0] = 0;
-      modifiers[0] = DRM_FORMAT_MOD_INVALID;
-    }
-  else
-    {
-      for (i = 0; i < gbm_bo_get_plane_count (bo); i++)
-        {
-          strides[i] = gbm_bo_get_stride_for_plane (bo, i);
-          handles[i] = gbm_bo_get_handle_for_plane (bo, i).u32;
-          offsets[i] = gbm_bo_get_offset (bo, i);
-          modifiers[i] = gbm_bo_get_modifier (bo);
-        }
-     }
-
-  width = gbm_bo_get_width (bo);
-  height = gbm_bo_get_height (bo);
-  format = gbm_bo_get_format (bo);
-
-  if (use_modifiers && modifiers[0] != DRM_FORMAT_MOD_INVALID)
-    {
-      if (drmModeAddFB2WithModifiers (drm_fd,
-                                      width,
-                                      height,
-                                      format,
-                                      handles,
-                                      strides,
-                                      offsets,
-                                      modifiers,
-                                      &kms_buffer->fb_id,
-                                      DRM_MODE_FB_MODIFIERS))
-        {
-          g_set_error (error,
-                       G_IO_ERROR,
-                       g_io_error_from_errno (errno),
-                       "drmModeAddFB2WithModifiers failed: %s",
-                       g_strerror (errno));
-          gbm_surface_release_buffer (kms_buffer->gbm.surface, bo);
-          return FALSE;
-        }
-    }
-  else if (drmModeAddFB2 (drm_fd,
-                          width,
-                          height,
-                          format,
-                          handles,
-                          strides,
-                          offsets,
-                          &kms_buffer->fb_id,
-                          0))
-    {
-      if (format != DRM_FORMAT_XRGB8888)
-        {
-          g_set_error (error,
-                       G_IO_ERROR,
-                       G_IO_ERROR_FAILED,
-                       "drmModeAddFB does not support format 0x%x",
-                       format);
-          gbm_surface_release_buffer (kms_buffer->gbm.surface, bo);
-          return FALSE;
-        }
-
-      if (drmModeAddFB (drm_fd,
-                        width,
-                        height,
-                        24,
-                        32,
-                        strides[0],
-                        handles[0],
-                        &kms_buffer->fb_id))
-        {
-          g_set_error (error,
-                       G_IO_ERROR,
-                       g_io_error_from_errno (errno),
-                       "drmModeAddFB failed: %s",
-                       g_strerror (errno));
-          gbm_surface_release_buffer (kms_buffer->gbm.surface, bo);
-          return FALSE;
-        }
-    }
-
-  kms_buffer->gbm.bo = bo;
-
-  return TRUE;
-}
-
-static void
-meta_kms_buffer_init (MetaKmsBuffer *kms_buffer)
-{
-}
-
-static void
-meta_kms_buffer_finalize (GObject *object)
-{
-  MetaKmsBuffer *kms_buffer = META_KMS_BUFFER (object);
-
-  if (kms_buffer->type == META_KMS_BUFFER_TYPE_GBM)
-    {
-      if (kms_buffer->gbm.gpu_kms != NULL &&
-          kms_buffer->gbm.fb_id != INVALID_FB_ID)
-        {
-          int drm_fd = meta_gpu_kms_get_fd (kms_buffer->gbm.gpu_kms);
-
-          drmModeRmFB (drm_fd, kms_buffer->fb_id);
-          kms_buffer->fb_id = INVALID_FB_ID;
-        }
-
-      if (kms_buffer->gbm.surface &&
-          kms_buffer->gbm.bo)
-        {
-          gbm_surface_release_buffer (kms_buffer->gbm.surface,
-                                      kms_buffer->gbm.bo);
-        }
-    }
-
-  G_OBJECT_CLASS (meta_kms_buffer_parent_class)->finalize (object);
-}
-
-static void
-meta_kms_buffer_class_init (MetaKmsBufferClass *klass)
-{
-  GObjectClass *object_class = G_OBJECT_CLASS (klass);
-
-  object_class->finalize = meta_kms_buffer_finalize;
-}
-
-MetaKmsBuffer *
-meta_kms_buffer_new_from_gbm (MetaGpuKms          *gpu_kms,
-                              struct gbm_surface  *gbm_surface,
-                              gboolean             use_modifiers,
-                              GError             **error)
-{
-  MetaKmsBuffer *kms_buffer;
-
-  g_return_val_if_fail (META_IS_GPU_KMS (gpu_kms), NULL);
-  g_return_val_if_fail (error == NULL || *error == NULL, NULL);
-
-  kms_buffer = g_object_new (META_TYPE_KMS_BUFFER, NULL);
-  kms_buffer->type = META_KMS_BUFFER_TYPE_GBM;
-  kms_buffer->gbm.gpu_kms = gpu_kms;
-  kms_buffer->gbm.surface = gbm_surface;
-
-  if (!meta_kms_buffer_acquire_swapped_buffer (kms_buffer,
-                                               use_modifiers,
-                                               error))
-    {
-      g_object_unref (kms_buffer);
-      return NULL;
-    }
-
-  return kms_buffer;
-}
-
-MetaKmsBuffer *
-meta_kms_buffer_new_from_dumb (uint32_t dumb_fb_id)
-{
-  MetaKmsBuffer *kms_buffer;
-
-  kms_buffer = g_object_new (META_TYPE_KMS_BUFFER, NULL);
-  kms_buffer->type = META_KMS_BUFFER_TYPE_WRAPPED_DUMB;
-  kms_buffer->wrapped_dumb.fb_id = dumb_fb_id;
-
-  return kms_buffer;
-}
-
-uint32_t
-meta_kms_buffer_get_fb_id (const MetaKmsBuffer *kms_buffer)
-{
-  g_return_val_if_fail (kms_buffer != NULL, INVALID_FB_ID);
-
-  return kms_buffer->fb_id;
-}
-
-struct gbm_bo *
-meta_kms_buffer_get_bo (const MetaKmsBuffer *kms_buffer)
-{
-  g_return_val_if_fail (kms_buffer != NULL, NULL);
-  g_return_val_if_fail (kms_buffer->type == META_KMS_BUFFER_TYPE_GBM, NULL);
-
-  return kms_buffer->gbm.bo;
-}
diff --git a/src/backends/native/meta-renderer-native.c b/src/backends/native/meta-renderer-native.c
index 94b7f290b56ce2c33e86e202c1c71c0a2781f6c1..979306aa624425dbf889a9e6881421126d354d35 100644
--- a/src/backends/native/meta-renderer-native.c
+++ b/src/backends/native/meta-renderer-native.c
@@ -58,8 +58,10 @@
 #include "backends/meta-output.h"
 #include "backends/meta-renderer-view.h"
 #include "backends/native/meta-crtc-kms.h"
+#include "backends/native/meta-drm-buffer-dumb.h"
+#include "backends/native/meta-drm-buffer-gbm.h"
+#include "backends/native/meta-drm-buffer.h"
 #include "backends/native/meta-gpu-kms.h"
-#include "backends/native/meta-kms-buffer.h"
 #include "backends/native/meta-monitor-manager-kms.h"
 #include "backends/native/meta-renderer-native-gles3.h"
 #include "backends/native/meta-renderer-native.h"
@@ -145,8 +147,8 @@ typedef struct _MetaOnscreenNativeSecondaryGpuState
 
   struct {
     struct gbm_surface *surface;
-    MetaKmsBuffer *current_fb;
-    MetaKmsBuffer *next_fb;
+    MetaDrmBuffer *current_fb;
+    MetaDrmBuffer *next_fb;
   } gbm;
 
   struct {
@@ -167,8 +169,8 @@ typedef struct _MetaOnscreenNative
 
   struct {
     struct gbm_surface *surface;
-    MetaKmsBuffer *current_fb;
-    MetaKmsBuffer *next_fb;
+    MetaDrmBuffer *current_fb;
+    MetaDrmBuffer *next_fb;
   } gbm;
 
 #ifdef HAVE_EGL_DEVICE
@@ -1753,12 +1755,12 @@ meta_onscreen_native_flip_crtc (CoglOnscreen  *onscreen,
     case META_RENDERER_NATIVE_MODE_GBM:
       if (gpu_kms == render_gpu)
         {
-          fb_id = meta_kms_buffer_get_fb_id (onscreen_native->gbm.next_fb);
+          fb_id = meta_drm_buffer_get_fb_id (onscreen_native->gbm.next_fb);
         }
       else
         {
           secondary_gpu_state = get_secondary_gpu_state (onscreen, gpu_kms);
-          fb_id = meta_kms_buffer_get_fb_id (secondary_gpu_state->gbm.next_fb);
+          fb_id = meta_drm_buffer_get_fb_id (secondary_gpu_state->gbm.next_fb);
         }
 
       if (!meta_gpu_kms_flip_crtc (gpu_kms,
@@ -1824,7 +1826,7 @@ set_crtc_fb (CoglOnscreen       *onscreen,
       if (!secondary_gpu_state)
         return;
 
-      fb_id = meta_kms_buffer_get_fb_id (secondary_gpu_state->gbm.next_fb);
+      fb_id = meta_drm_buffer_get_fb_id (secondary_gpu_state->gbm.next_fb);
     }
 
   x = crtc->rect.x - logical_monitor->rect.x;
@@ -1867,7 +1869,7 @@ meta_onscreen_native_set_crtc_modes (CoglOnscreen *onscreen)
   switch (renderer_gpu_data->mode)
     {
     case META_RENDERER_NATIVE_MODE_GBM:
-      fb_id = meta_kms_buffer_get_fb_id (onscreen_native->gbm.next_fb);
+      fb_id = meta_drm_buffer_get_fb_id (onscreen_native->gbm.next_fb);
       break;
 #ifdef HAVE_EGL_DEVICE
     case META_RENDERER_NATIVE_MODE_EGL_DEVICE:
@@ -1935,7 +1937,7 @@ crtc_mode_set_fallback (CoglOnscreen       *onscreen,
       return FALSE;
     }
 
-  fb_id = meta_kms_buffer_get_fb_id (onscreen_native->gbm.next_fb);
+  fb_id = meta_drm_buffer_get_fb_id (onscreen_native->gbm.next_fb);
   set_crtc_fb (onscreen, logical_monitor, crtc, fb_id);
   return TRUE;
 }
@@ -2067,6 +2069,8 @@ copy_shared_framebuffer_gpu (CoglOnscreen                        *onscreen,
   MetaRendererNative *renderer_native = renderer_gpu_data->renderer_native;
   MetaEgl *egl = meta_renderer_native_get_egl (renderer_native);
   GError *error = NULL;
+  MetaDrmBufferGbm *buffer_gbm;
+  struct gbm_bo *bo;
 
   if (!meta_egl_make_current (egl,
                               renderer_gpu_data->egl_display,
@@ -2082,12 +2086,14 @@ copy_shared_framebuffer_gpu (CoglOnscreen                        *onscreen,
 
   *egl_context_changed = TRUE;
 
+  buffer_gbm = META_DRM_BUFFER_GBM (onscreen_native->gbm.next_fb);
+  bo =  meta_drm_buffer_gbm_get_bo (buffer_gbm);
   if (!meta_renderer_native_gles3_blit_shared_bo (egl,
                                                   renderer_native->gles3,
                                                   renderer_gpu_data->egl_display,
                                                   renderer_gpu_data->secondary.egl_context,
                                                   secondary_gpu_state->egl_surface,
-                                                  meta_kms_buffer_get_bo (onscreen_native->gbm.next_fb),
+                                                  bo,
                                                   &error))
     {
       g_warning ("Failed to blit shared framebuffer: %s", error->message);
@@ -2106,14 +2112,14 @@ copy_shared_framebuffer_gpu (CoglOnscreen                        *onscreen,
     }
 
   g_clear_object (&secondary_gpu_state->gbm.next_fb);
-  secondary_gpu_state->gbm.next_fb =
-    meta_kms_buffer_new_from_gbm (secondary_gpu_state->gpu_kms,
-                                  secondary_gpu_state->gbm.surface,
-                                  renderer_native->use_modifiers,
-                                  &error);
+  buffer_gbm = meta_drm_buffer_gbm_new (secondary_gpu_state->gpu_kms,
+                                        secondary_gpu_state->gbm.surface,
+                                        renderer_native->use_modifiers,
+                                        &error);
+  secondary_gpu_state->gbm.next_fb = META_DRM_BUFFER (buffer_gbm);
   if (!secondary_gpu_state->gbm.next_fb)
     {
-      g_warning ("meta_kms_buffer_new_from_gbm failed: %s",
+      g_warning ("meta_drm_buffer_gbm_new failed: %s",
                  error->message);
       g_error_free (error);
       return;
@@ -2196,6 +2202,7 @@ copy_shared_framebuffer_cpu (CoglOnscreen                        *onscreen,
   CoglBitmap *dumb_bitmap;
   CoglPixelFormat cogl_format;
   gboolean ret;
+  MetaDrmBufferDumb *buffer_dumb;
 
   width = cogl_framebuffer_get_width (framebuffer);
   height = cogl_framebuffer_get_height (framebuffer);
@@ -2237,8 +2244,8 @@ copy_shared_framebuffer_cpu (CoglOnscreen                        *onscreen,
   cogl_object_unref (dumb_bitmap);
 
   g_clear_object (&secondary_gpu_state->gbm.next_fb);
-  secondary_gpu_state->gbm.next_fb =
-    meta_kms_buffer_new_from_dumb (target_fb_id);
+  buffer_dumb = meta_drm_buffer_dumb_new (target_fb_id);
+  secondary_gpu_state->gbm.next_fb = META_DRM_BUFFER (buffer_dumb);
 }
 
 static void
@@ -2326,6 +2333,7 @@ meta_onscreen_native_swap_buffers_with_damage (CoglOnscreen *onscreen,
   gboolean egl_context_changed = FALSE;
   MetaPowerSave power_save_mode;
   g_autoptr (GError) error = NULL;
+  MetaDrmBufferGbm *buffer_gbm;
 
   /*
    * Wait for the flip callback before continuing, as we might have started the
@@ -2349,14 +2357,15 @@ meta_onscreen_native_swap_buffers_with_damage (CoglOnscreen *onscreen,
     case META_RENDERER_NATIVE_MODE_GBM:
       g_warn_if_fail (onscreen_native->gbm.next_fb == NULL);
       g_clear_object (&onscreen_native->gbm.next_fb);
-      onscreen_native->gbm.next_fb =
-        meta_kms_buffer_new_from_gbm (render_gpu,
-                                      onscreen_native->gbm.surface,
-                                      renderer_native->use_modifiers,
-                                      &error);
+
+      buffer_gbm = meta_drm_buffer_gbm_new (render_gpu,
+                                            onscreen_native->gbm.surface,
+                                            renderer_native->use_modifiers,
+                                            &error);
+      onscreen_native->gbm.next_fb = META_DRM_BUFFER (buffer_gbm);
       if (!onscreen_native->gbm.next_fb)
         {
-          g_warning ("meta_kms_buffer_new_from_gbm failed: %s",
+          g_warning ("meta_drm_buffer_gbm_new failed: %s",
                      error->message);
           return;
         }
diff --git a/src/meson.build b/src/meson.build
index 74fe879d87bb735d765de6bd4a8e1c12e6522a7e..0a1262fe99a36e046c240e49db2e19d9113fe939 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -574,12 +574,16 @@ if have_native_backend
     'backends/native/meta-crtc-kms.h',
     'backends/native/meta-cursor-renderer-native.c',
     'backends/native/meta-cursor-renderer-native.h',
+    'backends/native/meta-drm-buffer-dumb.c',
+    'backends/native/meta-drm-buffer-dumb.h',
+    'backends/native/meta-drm-buffer-gbm.c',
+    'backends/native/meta-drm-buffer-gbm.h',
+    'backends/native/meta-drm-buffer.c',
+    'backends/native/meta-drm-buffer.h',
     'backends/native/meta-gpu-kms.c',
     'backends/native/meta-gpu-kms.h',
     'backends/native/meta-input-settings-native.c',
     'backends/native/meta-input-settings-native.h',
-    'backends/native/meta-kms-buffer.c',
-    'backends/native/meta-kms-buffer.h',
     'backends/native/meta-launcher.c',
     'backends/native/meta-launcher.h',
     'backends/native/meta-monitor-manager-kms.c',
